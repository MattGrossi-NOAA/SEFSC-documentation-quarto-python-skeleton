[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "SEFSC Quarto Documentation Theme",
    "section": "",
    "text": "This is a template for a simple Quarto website that looks like a “book”. This is a common format for documentation. It includes a GitHub Action that will build the website automatically when you make changes to the files. The NOAA palette and fonts has been added to theme.scss. The webpage will be on the gh-pages branch. Serving the website files from this branch is a common way to keep all the website files from cluttering your main branch.\nThis Quarto website has Python code in the code.qmd file and has a Jupyter notebook. The GitHub Action will render those for you but note that you need some a special RAW block at the top of your ipynb file. Without this, the Jupyter notebook won’t render (code blocks won’t be computed). It looks like this\nAlso you will need to add any modules that your code needs to the requirements.txt file so they are installed by the GitHub Action.\nInstructions for using this theme can be found in the HOWTO: Using the SEFSC Quarto Theme pages."
  },
  {
    "objectID": "index.html#about",
    "href": "index.html#about",
    "title": "SEFSC Quarto Documentation Theme",
    "section": "About",
    "text": "About\nA brief high-level description of what this application is used for and what it does.\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Sed condimentum porta iaculis. Vestibulum semper scelerisque nunc, ac sagittis quam ornare eget. Sed massa dui, vehicula at magna non, semper porttitor dolor. Pellentesque eget augue purus. Cras quis urna iaculis, aliquam urna non, malesuada velit. Suspendisse arcu diam, fringilla in ex fringilla, ultrices pharetra orci. Phasellus leo sapien, elementum vitae tempus in, aliquet vitae leo. Cras eros urna, suscipit tincidunt mi id, dignissim eleifend ante. Etiam ullamcorper dui auctor leo dapibus, at varius lorem mattis. Morbi maximus velit id nisi luctus commodo. Mauris ut bibendum urna, vel lobortis felis. Duis convallis mauris quis finibus dignissim.\nFusce interdum et ex eget maximus. Nam rhoncus elementum facilisis. Curabitur sagittis facilisis lectus, in viverra urna fermentum id. Praesent eget est libero. Praesent accumsan sed ex id finibus. In sed augue non tortor porta tristique vitae elementum sapien. Duis enim sapien, varius non nulla sit amet, mattis pharetra tellus. Ut volutpat placerat risus vitae faucibus. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas."
  },
  {
    "objectID": "index.html#usage",
    "href": "index.html#usage",
    "title": "SEFSC Quarto Documentation Theme",
    "section": "Usage",
    "text": "Usage\nDescribe how to use the application.\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Sed condimentum porta iaculis. Vestibulum semper scelerisque nunc, ac sagittis quam ornare eget. Sed massa dui, vehicula at magna non, semper porttitor dolor. Pellentesque eget augue purus. Cras quis urna iaculis, aliquam urna non, malesuada velit. Suspendisse arcu diam, fringilla in ex fringilla, ultrices pharetra orci. Phasellus leo sapien, elementum vitae tempus in, aliquet vitae leo. Cras eros urna, suscipit tincidunt mi id, dignissim eleifend ante. Etiam ullamcorper dui auctor leo dapibus, at varius lorem mattis. Morbi maximus velit id nisi luctus commodo. Mauris ut bibendum urna, vel lobortis felis. Duis convallis mauris quis finibus dignissim.\nFusce interdum et ex eget maximus. Nam rhoncus elementum facilisis. Curabitur sagittis facilisis lectus, in viverra urna fermentum id. Praesent eget est libero. Praesent accumsan sed ex id finibus. In sed augue non tortor porta tristique vitae elementum sapien. Duis enim sapien, varius non nulla sit amet, mattis pharetra tellus. Ut volutpat placerat risus vitae faucibus. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas."
  },
  {
    "objectID": "index.html#options",
    "href": "index.html#options",
    "title": "SEFSC Quarto Documentation Theme",
    "section": "Options",
    "text": "Options\nList and describe all available options.\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Sed condimentum porta iaculis. Vestibulum semper scelerisque nunc, ac sagittis quam ornare eget. Sed massa dui, vehicula at magna non, semper porttitor dolor. Pellentesque eget augue purus. Cras quis urna iaculis, aliquam urna non, malesuada velit. Suspendisse arcu diam, fringilla in ex fringilla, ultrices pharetra orci. Phasellus leo sapien, elementum vitae tempus in, aliquet vitae leo. Cras eros urna, suscipit tincidunt mi id, dignissim eleifend ante. Etiam ullamcorper dui auctor leo dapibus, at varius lorem mattis. Morbi maximus velit id nisi luctus commodo. Mauris ut bibendum urna, vel lobortis felis. Duis convallis mauris quis finibus dignissim.\nFusce interdum et ex eget maximus. Nam rhoncus elementum facilisis. Curabitur sagittis facilisis lectus, in viverra urna fermentum id. Praesent eget est libero. Praesent accumsan sed ex id finibus. In sed augue non tortor porta tristique vitae elementum sapien. Duis enim sapien, varius non nulla sit amet, mattis pharetra tellus. Ut volutpat placerat risus vitae faucibus. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas."
  },
  {
    "objectID": "index.html#release-notes",
    "href": "index.html#release-notes",
    "title": "SEFSC Quarto Documentation Theme",
    "section": "Release Notes",
    "text": "Release Notes\nVersion history summarizing the stages of development, enhancements, bug fixes, etc. as multiple versions are created. This section is not always relevant nor necessary, but it can be nice to see. The collapsible bulleted list below is a suggested template.\n\n\n Version History \n\n\n\nVersion 1.0 (Sep 2023): Initial version\n\n\nVersion 1.1 (Mon YYYY): Revised to include:\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Sed condimentum porta iaculis. Vestibulum semper scelerisque nunc, ac sagittis quam ornare eget. Sed massa dui, vehicula at magna non, semper porttitor dolor. Pellentesque eget augue purus.\n\n\nCras quis urna iaculis, aliquam urna non, malesuada velit. Suspendisse arcu diam, fringilla in ex fringilla, ultrices pharetra orci. Phasellus leo sapien, elementum vitae tempus in, aliquet vitae leo. Cras eros urna, suscipit tincidunt mi id, dignissim eleifend ante.\n\n\nEtiam ullamcorper dui auctor leo dapibus, at varius lorem mattis. Morbi maximus velit id nisi luctus commodo. Mauris ut bibendum urna, vel lobortis felis. Duis convallis mauris quis finibus dignissim.\n\n\n\n\nVersion 2.0 (Mon YYYY): Fusce interdum et ex eget maximus. Nam rhoncus elementum facilisis. Curabitur sagittis facilisis lectus, in viverra urna fermentum id. Praesent eget est libero. Praesent accumsan sed ex id finibus. In sed augue non tortor porta tristique vitae elementum sapien. Duis enim sapien, varius non nulla sit amet, mattis pharetra tellus. Ut volutpat placerat risus vitae faucibus. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas."
  },
  {
    "objectID": "content/howto/add-content.html",
    "href": "content/howto/add-content.html",
    "title": "Add content",
    "section": "",
    "text": "Edit the qmd or md files in the content folder. qmd files can include code (R, Python, Julia) and lots of Quarto markdown bells and whistles (like call-outs, cross-references, auto-citations and much more).\nEach page should start with\n---\ntitle: your title\n---\nand the first header will be the 2nd level, so ##. Note, there are situations where you leave off\n---\ntitle: your title\n---\nand start the qmd file with a level header #, but if using the default title yaml (in the --- fence) is a good habit since it makes it easy for Quarto convert your qmd file to other formats (like into a presentation).",
    "crumbs": [
      "Content",
      "HOWTO: Using the SEFSC Quarto Theme",
      "Add content"
    ]
  },
  {
    "objectID": "content/howto/add-content.html#edit-and-add-your-pages",
    "href": "content/howto/add-content.html#edit-and-add-your-pages",
    "title": "Add content",
    "section": "",
    "text": "Edit the qmd or md files in the content folder. qmd files can include code (R, Python, Julia) and lots of Quarto markdown bells and whistles (like call-outs, cross-references, auto-citations and much more).\nEach page should start with\n---\ntitle: your title\n---\nand the first header will be the 2nd level, so ##. Note, there are situations where you leave off\n---\ntitle: your title\n---\nand start the qmd file with a level header #, but if using the default title yaml (in the --- fence) is a good habit since it makes it easy for Quarto convert your qmd file to other formats (like into a presentation).",
    "crumbs": [
      "Content",
      "HOWTO: Using the SEFSC Quarto Theme",
      "Add content"
    ]
  },
  {
    "objectID": "content/howto/add-content.html#add-your-pages-the-project",
    "href": "content/howto/add-content.html#add-your-pages-the-project",
    "title": "Add content",
    "section": "Add your pages the project",
    "text": "Add your pages the project\n\nAdd the files to _quarto.yml",
    "crumbs": [
      "Content",
      "HOWTO: Using the SEFSC Quarto Theme",
      "Add content"
    ]
  },
  {
    "objectID": "content/howto/rendering.html",
    "href": "content/howto/rendering.html",
    "title": "Rendering",
    "section": "",
    "text": "The repo includes a GitHub Action that will render (build) the website automatically when you make changes to the files. It will be pushed to the gh-pages branch.\nBut when you are developing your content, you will want to render it locally.",
    "crumbs": [
      "Content",
      "HOWTO: Using the SEFSC Quarto Theme",
      "Rendering"
    ]
  },
  {
    "objectID": "content/howto/rendering.html#step-1.-make-sure-you-have-a-recent-rstudio",
    "href": "content/howto/rendering.html#step-1.-make-sure-you-have-a-recent-rstudio",
    "title": "Rendering",
    "section": "Step 1. Make sure you have a recent RStudio",
    "text": "Step 1. Make sure you have a recent RStudio\nHave you updated RStudio since about August 2022? No? Then update to a newer version of RStudio. In general, you want to keep RStudio updated and it is required to have a recent version to use Quarto.",
    "crumbs": [
      "Content",
      "HOWTO: Using the SEFSC Quarto Theme",
      "Rendering"
    ]
  },
  {
    "objectID": "content/howto/rendering.html#step-2.-clone-and-create-rstudio-project",
    "href": "content/howto/rendering.html#step-2.-clone-and-create-rstudio-project",
    "title": "Rendering",
    "section": "Step 2. Clone and create RStudio project",
    "text": "Step 2. Clone and create RStudio project\nFirst, clone the repo onto your local computer. How? You can click File &gt; New Project and then select “Version Control”. Paste in the url of the repository. That will clone the repo on to your local computer. When you make changes, you will need to push those up.",
    "crumbs": [
      "Content",
      "HOWTO: Using the SEFSC Quarto Theme",
      "Rendering"
    ]
  },
  {
    "objectID": "content/howto/rendering.html#step-3.-render-within-rstudio",
    "href": "content/howto/rendering.html#step-3.-render-within-rstudio",
    "title": "Rendering",
    "section": "Step 3. Render within RStudio",
    "text": "Step 3. Render within RStudio\nRStudio will recognize that this is a Quarto project by the presence of the _quarto.yml file and will see the “Build” tab. Click the “Render website” button to render to the _site folder.\nPreviewing: You can either click index.html in the _site folder and specify “preview in browser” or set up RStudio to preview to the viewer panel. To do the latter, go to Tools &gt; Global Options &gt; R Markdown. Then select “Show output preview in: Viewer panel”.",
    "crumbs": [
      "Content",
      "HOWTO: Using the SEFSC Quarto Theme",
      "Rendering"
    ]
  },
  {
    "objectID": "content/howto/publishing.html",
    "href": "content/howto/publishing.html",
    "title": "Publishing",
    "section": "",
    "text": "To get your Quarto webpage to show up with the url\nyou have a few steps.",
    "crumbs": [
      "Content",
      "HOWTO: Using the SEFSC Quarto Theme",
      "Publishing"
    ]
  },
  {
    "objectID": "content/howto/publishing.html#turn-on-github-pages-for-your-repo",
    "href": "content/howto/publishing.html#turn-on-github-pages-for-your-repo",
    "title": "Publishing",
    "section": "Turn on GitHub Pages for your repo",
    "text": "Turn on GitHub Pages for your repo\n\nTurn on GitHub Pages under Settings &gt; Pages . You will set pages to be made from the gh-pages branch and the root directory.\nTurn on GitHub Actions under Settings &gt; Actions &gt; General\n\nThe GitHub Action will automatically recreate your website when you push to GitHub after you do the initial gh-pages set-up",
    "crumbs": [
      "Content",
      "HOWTO: Using the SEFSC Quarto Theme",
      "Publishing"
    ]
  },
  {
    "objectID": "content/howto/publishing.html#do-your-first-publish-to-gh-pages",
    "href": "content/howto/publishing.html#do-your-first-publish-to-gh-pages",
    "title": "Publishing",
    "section": "Do your first publish to gh-pages",
    "text": "Do your first publish to gh-pages\nThe first time you publish to gh-pages, you need to do so locally.\n\nOn your local computer, open a terminal window and cd to your repo directory. Here is what that cd command looks like for me. You command will look different because your local repo will be somewhere else on your computer.\n\ncd ~/Documents/GitHub/NOAA-quarto-simple\n\nPublish to the gh-pages. In the terminal type\n\nquarto publish gh-pages\nThis is going to render your webpage and then push the _site contents to the gh-pages branch.",
    "crumbs": [
      "Content",
      "HOWTO: Using the SEFSC Quarto Theme",
      "Publishing"
    ]
  },
  {
    "objectID": "content/howto/publishing.html#dont-like-using-gh-pages",
    "href": "content/howto/publishing.html#dont-like-using-gh-pages",
    "title": "Publishing",
    "section": "Don’t like using gh-pages?",
    "text": "Don’t like using gh-pages?\nIn some cases, you don’t want your website on the gh-pages branch. For example, if you are creating releases and you want the website pages archived in that release, then you won’t want your website pages on the gh-pages branch.\nHere are the changes you need to make if you to avoid gh-pages branch.\n\nAt the top of _quarto.yml add the following:\n\nproject: \n  type: website\n  output-dir: docs\n\nOn GitHub under Settings &gt; Pages set pages to be made from the main branch and the docs directory.\nMake sure docs is not listed in .gitignore\nPublish the site the first time locally using quarto publish from the terminal\nChange the GitHub Action because you can’t use quarto publish gh-pages. You’ll need to push to the main branch yourself (in the GitHub Action)\n\non:\n  push:\n    branches: main\n\nname: Render and Publish\n\njobs:\n  build-deploy:\n    runs-on: ubuntu-latest\n    env:\n      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}\n\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v2 \n        \n      - name: Set up R (needed for Rmd)\n        uses: r-lib/actions/setup-r@v2\n\n      - name: Install packages (needed for Rmd)\n        run: Rscript -e 'install.packages(c(\"rmarkdown\", \"knitr\", \"jsonlite\"))'\n\n      - name: Set up Quarto\n        uses: quarto-dev/quarto-actions/setup@v2\n        with:\n          # To install LaTeX to build PDF book \n          # tinytex: true \n          # uncomment below and fill to pin a version\n          # version: 0.9.600\n      \n      - name: Render Quarto Project\n        uses: quarto-dev/quarto-actions/render@v2\n        with:\n          to: html\n\n      - name: Set up Git\n        run: |\n          git config --local user.email \"actions@github.com\"\n          git config --local user.name \"GitHub Actions\"\n\n      - name: Commit all changes and push\n        run: |\n          git add -A && git commit -m 'Build site' || echo \"No changes to commit\"\n          git push origin || echo \"No changes to commit\"",
    "crumbs": [
      "Content",
      "HOWTO: Using the SEFSC Quarto Theme",
      "Publishing"
    ]
  },
  {
    "objectID": "content/about/about.html",
    "href": "content/about/about.html",
    "title": "Overview",
    "section": "",
    "text": "This page is for informational purposes only. It’s technical. It captures the process to create the GitHub Pages SEFSC-documentation-quarto-python-skeleton repository template for use within the NOAA Fisheries Southeast Fisheries Science Center. Nothing herein needs to be repeated to create a specific documentation page in a GitHub repository. These steps are only necessary if one desires to create a new template of the same format and functionality – for example, if a different Financial Management Center (FMC) desires to create their own custom template. Instructions for creating an actual documentation page using the theme are provided in Getting started with SEFSC Quarto Documentation Theme Skeleton.\nThe NOAA Fisheries Southeast Fisheries Science Center (SEFSC) is actively developing a suite of new, innovative machine learning models designed to increase data processing efficiencies across the Center’s mission portfolio. These projects include, but are not limited to, automating the processing of Gulf and South Atlantic video survey data to derive species counts, automating aging of Gulf and Atlantic menhaden and red snapper, and automating the derivation of fish lengths from stereo video. These models were developed in Python using open-source libraries (e.g., PyTorch, cudatoolkit, Torchvision, and scikit-learn) by partners through the NOAA Northern Gulf Institute (NGI) and the Cooperative Institute for Climate, Ocean, and Ecosystem Studies (CICOES) and are or will be maintained on the SEFSC Organization GitHub account.\nIntroducing new computer models into the Center’s data processing procedures necessitates adequate documentation so that the end users will know how to install and execute the models in operational use. Indeed, all computer models and software should be documented by the developers before being released to the intended end user. In the absence of a universally accepted documentation template for use within the SEFSC, NOAA Fisheries, or even NOAA at large, staff across NOAA have established their own approaches and templates of varying degrees of complexity based on their immediate needs. Some examples of these solutions are summarized in Table 1 along with notable strengths and weaknesses of each.\nSeveral features were prioritized when selecting a platform for SEFSC documentation:\n\nContent version control\nDocumentation existing alongside the model source code\nMinimal learning curve for populating and maintaining content\nLayout and formatting customization to align with agency visual branding requirements\n\n\n\n\nTable 1: A variety of resources have been used across NOAA for documenting procedures or applications, each having its own advantages and disadvantages. In the absence of guidance or directives, users currently select the approach best suited to their needs. This non-exhaustive list provides some examples of documentation solutions.\n\n\n\n\nDOCUMENTATION SOLUTION\n\n\nADVANTAGES\n\n\nDISADVANTAGES\n\n\n\n\nMicrosoft Word or Google Doc\n\n\n\n\nCreation is straightforward\n\n\nEasily converted to PDF\n\n\nSoftware readily available to NOAA staff\n\n\n\n\n\n\nNot co-located with software\n\n\nDocument owner often retains ownership\n\n\nDifficult to share publicly\n\n\nNo version control\n\n\n\n\n\n\nGitHub respository Wiki  Example: NOAA IOOS National Glider Data Assembly Center (NGDAC) Documentation (archived)\n\n\n\n\nConsistent formatting across all GitHub repositories (repos)\n\n\nConnected to the repo in which application is hosted\n\n\nPublic accessibility follows repo settings\n\n\nNo local software requirements\n\n\n\n\n\n\nLimited functionality\n\n\nNo ability to customize appearances, layouts, etc.\n\n\nLimited version control\n\n\nLearning curve with Markdown and HTML to populate content\n\n\n\n\n\n\nQuarto webpage made with R  Example: Quarto webpage with book layout made in RStudio\n\n\n\n\nConsistent formatting across implementations\n\n\nHosted on GitHub Pages (gh-pages) alongside the software itself\n\n\nGitHub version controlled\n\n\nTemplate and setup guidance available via NOAA Fisheries Open Science initiative\n\n\n\n\n\n\nLearning curve with Markdown and HTML to populate content\n\n\nLearning curve with R and RStudio to develop content locally\n\n\nLearning curve with GitHub Pages and GitHub Actions if customization is needed\n\n\n\n\n\n\nQuarto webpage made with Python  Example: Quarto webpage with book layout made with Python\n\n\n\n\nConsistent formatting across implementations\n\n\nCan be customized for the organization with optional centralized format control\n\n\nEasily templated to minimize learning curves\n\n\nHosted on gh-pages within the repo in which the application is hosted\n\n\nFull GitHub version control\n\n\nTemplate and setup guidance available via NOAA Fisheries Open Science initiative\n\n\n\n\n\n\nLearning curve with Markdown and HTML (optional) to populate content\n\n\nLearning curve with GitHub Pages and GitHub Actions if customization is needed\n\n\n\n\n\n\nGitHub Pages webpage with Jekyll theme  Example: NOAA IOOS Documentation Portal\n\n\n\n\nConsistent formatting across implementations\n\n\nCan be customized for the organization with optional centralized format control\n\n\nEasily templated to minimize learning curves\n\n\nHosted on gh-pages within the repo in which the application is hosted\n\n\nFull GitHub version control\n\n\nTemplate and setup guidance created by IOOS\n\n\n\n\n\n\nLearning curve with Markdown and HTML to populate content\n\n\nAdvanced customization requires knowledge of gh-pages, GitHub Actions, CSS, and other languages\n\n\nInitial setup can be challenging\n\n\n\n\n\n\nGoogle Docs, though straightforward to create and widely used across NOAA, present too many challenges. File ownership is a perpetual problem, with the original author often retaining ownership and files getting lost in staffing changes. Without preserving documents’ URLs, sharing access permissions, and transferring ownership when needed, these files often get lost or are not known to exist by new staff. There is also a tendency for documents to perpetually stay in “draft” version, which casts doubt on the accuracy of the content and whether or not a final version exists. A far better solution is one that is connected to GitHub where the model code itself is hosted and maintained. One option is GitHub Wikis, which can be created for any repository and have been widely used by NOAA Integrated Ocean Observing System (IOOS) programs, such as the original National Glider Data Assembly Center documentation page. Yet these Wikis offer limited version control and customization aside from the actual content. GitHub Pages, a service that allows a project website to be freely hosted for any repository, offers a more comprehensive assortment of options and flexibilities including customizable themes that can be tailored to agency visual branding, the ability to control this theme in one repository and use it across any number of documents, full version control, and the option of creating a template repository that can be easily duplicated and integrated into new projects. This project uses the simplicity of Quarto, an open-source scientific and technical publishing system, to create a documentation website and utilizes GitHub Pages for hosting with full version control. (For an alternative solution using Jekyll and GitHub Pages, see SEFSC Jekyll Documentation Theme.)",
    "crumbs": [
      "Content",
      "ABOUT: Creating the SEFSC Quarto Theme and Template",
      "Overview"
    ]
  },
  {
    "objectID": "content/about/template.html",
    "href": "content/about/template.html",
    "title": "Creating the Documentation Template",
    "section": "",
    "text": "Step 1: Clone the NMFS Open Science repository\nThis is done on the GitHub website and assumes the user already has a GitHub account and is signed in. These steps will duplicate the NOAA Open Science repo into that user’s account.\n\nNavigate to the nmfs-opensci/NOAA-quarto-simple-python in a web browser.\nClick the green “Use this template” button and select “Create a new repository”.\n\n\n\nSelect the “Include all branches” box. This is important to ensure everything works without any additional manual configuration.\nSelect a repo owner and provide a name for the new repo being created. Enter a description, if desired. (This can be changed or added later.) Select “Public”.\nClick “Create repository”\n\nIn the newly created repo, click “Settings” at the top of the page.\nSelect “Pages” on the side menu.\nEnable GitHub Pages, if not already enabled, and note the URL at which the site is live. You can verify that everything worked by navigating to the site in a web browser. It should exactly like the original web book. Keep other settings unchanged and save any changes.\n\n\n\n\nStep 2: Clone this new repo locally\n\nOne the main page of the new repo, click the green “&lt; &gt; Code” button.\nCopy the HTTPS web URL shown in the popup.\nOn your local computer, in a terminal window or Command Prompt, navigate to where the repo is to be downloaded, and type\ngit clone &lt;URL&gt;\nwhere &lt;URL&gt; is the web URL from Step 2.2 above.\nPress enter. The repo will now be downloaded to your local machine.\nAlternatively, after Step 2.1, either use the “Open with GitHub Desktop” or the “Download ZIP” options shown above to download the repo. Be sure to unzip it if you retrieve it this way.",
    "crumbs": [
      "Content",
      "ABOUT: Creating the SEFSC Quarto Theme and Template",
      "Creating the Documentation Template"
    ]
  },
  {
    "objectID": "content/about/theme.html",
    "href": "content/about/theme.html",
    "title": "Creating the Custom Theme",
    "section": "",
    "text": "IOOS uses a custom website theme to maintain consistent formatting, appearance, and functionality across all documentation sites. Some of the most noticable thematic features include:\n\nIOOS header logo added and colors changed in accordance with branding guidelines\nPage footer with appropriate links and contact information\nCommon horizontal navigation bar with IOOS-related links and resources\n“Behind the scenes” configurations that govern how the website works\n\nThis theme is simply a GitHub repository containing the necessary configuration files, scripts, and visual branding to provide the underlying structure of a documentation web page. IOOS implements this theme in all documentation pages through the use of GitHub submodules, the details of which are beyond the scope of this document but, in short, allow theme files to be contained in their own repository and then embedded into a separate repository that contains the content files for the web page. There are several advantages to this. First, it means that individuals seeking to write documentation do not need to worry about creating a website. The “guts” already exist. Second, the same theme repository can be embedded into an infinite number of documentation repositories, providing a consistent look and feel across all of them. Finally, the theme can be modified at any time by the owner (for example, the IOOS Program Office) and those changes can easily be propagated through to every other site that uses the theme by simply pulling the changes into each of the respective repositories.\n\nStep 3: Creata a new “documentation-theme-quarto” repository\nThis is done on the GitHub website and assumes the user already has a GitHub account and is signed in. These steps will duplicate the NOAA Open Science repo into that user’s account. This repo will contain the theme files and manage site appearances according to the needs of the SEFSC.\n\nOn the “Repositories” tab, click the green “New” button to create a new repo.\nDo not use a template. Select a repository ower, provide a name (e.g., “documentation-theme-quarto”), and type a description, if desired.\nClick “Create repository”\n\n\n\nStep 4: Clone this repository locally\n\nOne the main page of the new repo, click the green “&lt; &gt; Code” button.\nCopy the HTTPS web URL shown in the popup.\nOn your local computer, in a terminal window or Command Prompt, navigate to where the repo is to be downloaded, and type\ngit clone &lt;URL&gt;\nwhere &lt;URL&gt; is the web URL from Step 4.2 above.\n\n\n\n\n\n\nImportant\n\n\n\nThis repo can be located in the same parent directory as the template repo created earlier, but it should not be located within that repo.\n\n\nPress enter. The repo will now be downloaded to your local machine.\nAlternatively, after Step 4.1, either use the “Open with GitHub Desktop” or the “Download ZIP” options shown above to download the repo. Be sure to unzip it if you retrieve it this way.\n\n\n\nStep 5: Populate the theme repository",
    "crumbs": [
      "Content",
      "ABOUT: Creating the SEFSC Quarto Theme and Template",
      "Creating the Custom Theme"
    ]
  },
  {
    "objectID": "content/about/quarto.html",
    "href": "content/about/quarto.html",
    "title": "About This Project",
    "section": "",
    "text": "Quarto is used widely across NOAA Fisheries because of its flexibility, alignment with open science principles, integration with the R programming language and RStudio, and its relative ease of use. A number of use cases, including several webpages, are demonstrated on the NMFS Open Science GitHub page. While most NOAA Fisheries staff use Quarto with R and RStudio, Quarto also supports Python, Jupyter, and Visual Studio (VS) Code, all of which are more common within the computer science and, in particular, the artifiicial intelligence and machine learning communities. One of the most compelling features of Quarto is its seamless integration with GitHub for version control and hosting websites.\nThe decision to use GitHub Pages (gh-pages) for SEFSC documentation was inspired by its widespread use within IOOS. Correspondence with an IOOS data management analyst revealed that all IOOS documentation pages are either already utilizing gh-pages or are in the process of migrating to it because of the strengths listed in Table 1. IOOS hosts a Documentation Portal within their organizational GitHub account to compile all products and projects documentation in one central location.\nAn existing NMFS Open Science template for a simple Quarto web book with Python support provided the starting point (see the repository’s acknowledgements for full credit.) This repository (repo) contains both website configuration files, such as yaml files and images, and content files in the form of Quarto Markdown files. It was pre-configured to build and deploy the web book (i.e., webpage) to a gh-pages branch while the configuration and content files resided in the main branch. More on this later. The steps taken to replicate and adapt this for SEFSC documentation pages follow.",
    "crumbs": [
      "Content",
      "ABOUT: Creating the SEFSC Quarto Theme and Template",
      "About This Project"
    ]
  },
  {
    "objectID": "content/howto/setup.html",
    "href": "content/howto/setup.html",
    "title": "GitHub Set-up",
    "section": "",
    "text": "This Quarto website has Python code in the code.qmd file and has a Jupyter notebook. The GitHub Action will render those for you but note that you need some a special RAW block at the top of your ipynb file. Without this, the Jupyter notebook won’t render (code blocks won’t be computed). It looks like this\nAlso you will need to add any modules that your code needs to the requirements.txt file so they are installed by the GitHub Action.",
    "crumbs": [
      "Content",
      "HOWTO: Using the SEFSC Quarto Theme",
      "GitHub Set-up"
    ]
  },
  {
    "objectID": "content/howto/setup.html#github-set-up",
    "href": "content/howto/setup.html#github-set-up",
    "title": "GitHub Set-up",
    "section": "GitHub Set-up",
    "text": "GitHub Set-up\n\nClick the green “use template” button to make a repository with this content. Make sure to make your repo public (since GitHub Pages doesn’t work on private repos unless you have a paid account) and check box to include all the branches (so that you get the gh-pages branch).\n\n\n\nTurn on GitHub Pages under Settings &gt; Pages . You will set pages to be made from the gh-pages branch and root directory.\n\n\n\nTurn on GitHub Actions under Settings &gt; Actions &gt; General\n\n\n\nEdit the repo description and Readme to add a link to the webpage. When you edit the description, you will see the link url in the url box or you can click on the Actions tab or the Settings &gt; Pages page to find the url.",
    "crumbs": [
      "Content",
      "HOWTO: Using the SEFSC Quarto Theme",
      "GitHub Set-up"
    ]
  },
  {
    "objectID": "content/howto/customizing.html",
    "href": "content/howto/customizing.html",
    "title": "Customization",
    "section": "",
    "text": "Quarto allow many bells and whistles to make nice output. Read the documentation here Quarto documentation.",
    "crumbs": [
      "Content",
      "HOWTO: Using the SEFSC Quarto Theme",
      "Customization"
    ]
  },
  {
    "objectID": "content/howto/customizing.html#quarto-documentation",
    "href": "content/howto/customizing.html#quarto-documentation",
    "title": "Customization",
    "section": "",
    "text": "Quarto allow many bells and whistles to make nice output. Read the documentation here Quarto documentation.",
    "crumbs": [
      "Content",
      "HOWTO: Using the SEFSC Quarto Theme",
      "Customization"
    ]
  },
  {
    "objectID": "content/howto/customizing.html#examples",
    "href": "content/howto/customizing.html#examples",
    "title": "Customization",
    "section": "Examples",
    "text": "Examples\nLooking at other people’s Quarto code is a great way to figure out how to do stuff. Most will have a link to a GitHub repo where you can see the raw code. Look for a link to edit page or see source code. This will usually be on the right. Or look for the GitHub icon somewhere.\n\nQuarto gallery\nnmfs-openscapes\nFaye lab manual\nquarto-titlepages Note the link to edit is broken. Go to repo and look in documentation directory.",
    "crumbs": [
      "Content",
      "HOWTO: Using the SEFSC Quarto Theme",
      "Customization"
    ]
  },
  {
    "objectID": "content/howto/code.html",
    "href": "content/howto/code.html",
    "title": "Rendering with Code",
    "section": "",
    "text": "You can have code Python in your qmd file. You will need to have these installed on your local computer, but presumably you do already if you are adding code to your qmd files.\nimport matplotlib.pyplot as plt\n\nx = [5,7,8,7,2,17,2,9,4,11,12,9,6]\ny = [99,86,87,88,111,86,103,87,94,78,77,85,86]\n\nplt.scatter(x, y)\nplt.show()",
    "crumbs": [
      "Content",
      "HOWTO: Using the SEFSC Quarto Theme",
      "Rendering with Code"
    ]
  },
  {
    "objectID": "content/howto/code.html#polar-axis",
    "href": "content/howto/code.html#polar-axis",
    "title": "Rendering with Code",
    "section": "Polar Axis",
    "text": "Polar Axis\nFor a demonstration of a line plot on a polar axis, see Figure 1.\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n\n\n\n\n\n\n\nFigure 1",
    "crumbs": [
      "Content",
      "HOWTO: Using the SEFSC Quarto Theme",
      "Rendering with Code"
    ]
  },
  {
    "objectID": "content/howto/code.html#modify-the-github-action",
    "href": "content/howto/code.html#modify-the-github-action",
    "title": "Rendering with Code",
    "section": "Modify the GitHub Action",
    "text": "Modify the GitHub Action\nWhen you add Python modules, you will need to change the GitHub Action in .github/workflows to install these in order for GitHub to be able to render your webpage. The GitHub Action installs Python since I used that in code.qmd. If you use R or Julia instead, then you will need to update the GitHub Action to install those.\nIf getting the GitHub Action to work is too much hassle (and that definitely happens), you can alway render locally and publish to the gh-pages branch. If you do this, make sure to delete or rename the GitHub Action to something like\nrender-and-publish.old_yml\nso GitHub does not keep trying to run it. Nothing bad will happen if you don’t do this, but if you are not using the action (because it keeps failing), then you don’t need GitHub to run it.",
    "crumbs": [
      "Content",
      "HOWTO: Using the SEFSC Quarto Theme",
      "Rendering with Code"
    ]
  },
  {
    "objectID": "content/howto/code.html#render-locally-and-publish-to-gh-pages-branch",
    "href": "content/howto/code.html#render-locally-and-publish-to-gh-pages-branch",
    "title": "Rendering with Code",
    "section": "Render locally and publish to gh-pages branch",
    "text": "Render locally and publish to gh-pages branch\nTo render locally and push up to the gh-pages branch, open a terminal window and then cd to the directory with the Quarto project. Type this in the terminal:\nquarto render gh-pages",
    "crumbs": [
      "Content",
      "HOWTO: Using the SEFSC Quarto Theme",
      "Rendering with Code"
    ]
  },
  {
    "objectID": "content/howto/notebooks.html",
    "href": "content/howto/notebooks.html",
    "title": "Jupyter Notebook",
    "section": "",
    "text": "You can create content with Jupyter notebooks.\n\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nBelow we’ll display a map using folium. When your book is built, the code for creating the interactive map is retained.\n\nimport folium\nm = folium.Map(\n    location=[45.372, -121.6972],\n    zoom_start=12,\n    tiles='Stamen Terrain',\n    attr='&lt;a href=https://maps.stamen.com/terrain/Stamen Terrain&lt;/a&gt;'\n)\n\nfolium.Marker(\n    location=[45.3288, -121.6625],\n    popup='Mt. Hood Meadows',\n    icon=folium.Icon(icon='cloud')\n).add_to(m)\n\nfolium.Marker(\n    location=[45.3311, -121.7113],\n    popup='Timberline Lodge',\n    icon=folium.Icon(color='green')\n).add_to(m)\n\nfolium.Marker(\n    location=[45.3300, -121.6823],\n    popup='Some Other Location',\n    icon=folium.Icon(color='red', icon='info-sign')\n).add_to(m)\n\nm\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook",
    "crumbs": [
      "Content",
      "HOWTO: Using the SEFSC Quarto Theme",
      "Jupyter Notebook"
    ]
  },
  {
    "objectID": "content/howto/notebooks.html#a-plot",
    "href": "content/howto/notebooks.html#a-plot",
    "title": "Jupyter Notebook",
    "section": "",
    "text": "import numpy as np\nimport matplotlib.pyplot as plt\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()",
    "crumbs": [
      "Content",
      "HOWTO: Using the SEFSC Quarto Theme",
      "Jupyter Notebook"
    ]
  },
  {
    "objectID": "content/howto/notebooks.html#interactive-outputs",
    "href": "content/howto/notebooks.html#interactive-outputs",
    "title": "Jupyter Notebook",
    "section": "",
    "text": "Below we’ll display a map using folium. When your book is built, the code for creating the interactive map is retained.\n\nimport folium\nm = folium.Map(\n    location=[45.372, -121.6972],\n    zoom_start=12,\n    tiles='Stamen Terrain',\n    attr='&lt;a href=https://maps.stamen.com/terrain/Stamen Terrain&lt;/a&gt;'\n)\n\nfolium.Marker(\n    location=[45.3288, -121.6625],\n    popup='Mt. Hood Meadows',\n    icon=folium.Icon(icon='cloud')\n).add_to(m)\n\nfolium.Marker(\n    location=[45.3311, -121.7113],\n    popup='Timberline Lodge',\n    icon=folium.Icon(color='green')\n).add_to(m)\n\nfolium.Marker(\n    location=[45.3300, -121.6823],\n    popup='Some Other Location',\n    icon=folium.Icon(color='red', icon='info-sign')\n).add_to(m)\n\nm\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook",
    "crumbs": [
      "Content",
      "HOWTO: Using the SEFSC Quarto Theme",
      "Jupyter Notebook"
    ]
  },
  {
    "objectID": "content/howto/acknowledgements.html",
    "href": "content/howto/acknowledgements.html",
    "title": "Acknowledgments",
    "section": "",
    "text": "This repo and GitHub Action was based on the tutorial by Openscapes quarto-website-tutorial by Julia Lowndes and Stefanie Butland.",
    "crumbs": [
      "Content",
      "HOWTO: Using the SEFSC Quarto Theme",
      "Acknowledgments"
    ]
  }
]